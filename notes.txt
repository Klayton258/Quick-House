
Primeiro  actualizar middleware==========>>>>>>>>>>>>>>>>>======

 php artisan make:middleware Language.php

 - traz um file com a classe handle

 --Next up, Add the middleware entry into the Kernel.php file

 -----rodar esse comando para criar um controler de  language!

 php artisan make:controller LanguageController

colocar nas routas......

Route::get('lang/{lang}', ['as' => 'lang.switch', 'uses' => 'App\Http\Controllers\LanguageController@switchLang']);


name
Username
phone
gender
birthDate
email
password
comfirmPassword



==================================================House

<?php

namespace App\Http\Livewire;

use App\Models\Category;
use App\Models\House;
use App\Models\Type;
use Livewire\Component;
use Livewire\WithPagination;
use Illuminate\Support\Facades\DB;

use function PHPSTORM_META\type;

class HouseComponent extends Component
{
    public $slug;

    use WithPagination;

    public $pageSize=2;
    protected $paginationTheme ='bootstrap';
    public $orderBy= 'Default Sorting';

    public function changeOrderBy($orderBy)
    {
        $this->orderBy =$orderBy;
    }
    public function mount($slug)
    {
        $this->slug = $slug;
        // $this->slug = request()->slug;
    }
      public function redirectToCategory($slug)
      {
          $url = route('house.category', ['slug' => $slug]);
          return redirect($url);
      }

      public function goToCategory($slug)
      {
          $this->redirectToCategory($slug);
      }
      //change page size,
      public function changePagesize($size)
      {
          $this->pageSize =$size;
      }

    public function render()
    {
        if ($this->orderBy =='Price: Low to High') {
            $houses =House::orderBy('price', 'ASC')->paginate($this->pageSize);
        } elseif ($this->orderBy =='Price: High to Low') {
            $houses =House::orderBy('price', 'DESC')->paginate($this->pageSize);
        } elseif ($this->orderBy =='Sort: by Newest') {
            // $houses =house::latest('price')->paginate($this->pageSize);
            //which is the same with:
            $houses =House::orderBy('price', 'DESC')->paginate($this->pageSize);
        } else {
            $houses = House::paginate($this->pageSize);
        }
        // $type= Type::where(['id'=> $this->id])->first();

        // $type_name=$type->type_name;
        // dd($type->id);
        $categories = Category::orderBy('name', 'ASC')->get();
        $houses = House::paginate($this->pageSize);
        return view('livewire.house-component', ['houses'=>$houses, 'categories'=>$categories]);
    }
}


=============================================CategComponent

<?php

namespace App\Http\Livewire;

use App\Models\Category;
use App\Models\House;
use Illuminate\Support\Facades\DB;
use Livewire\Component;
use Livewire\WithPagination;

class CategComponent extends Component
{
    use WithPagination;

    protected $paginationTheme ='bootstrap';
    public $pageSize=2;
    public $orderBy= 'Default Sorting';
    public $slug;

    //change page size,
    public function changePagesize($size)
    {
        $this->pageSize =$size;
    }

    public function changeOrderBy($orderBy)
    {
        $this->orderBy =$orderBy;
    }

    public function mount($slug)
    {
        $this->slug = $slug;
        // $this->slug = request()->slug;
    }

    public function render()
    {
        $outdoor = DB::table('houses')->where(['outdoor_id'=> 2])->limit(4)->orderByDesc('id')->get();
        $s= $this->slug = request()->slug;
        $category =Category::where('slug', $s)->first();

        $category_id = $category->id;
        $category_name = $category->name;

        if ($this->orderBy =='Price: Low to High') {
            // $houses =House::where('category_id',$category_id)->orderBY('regular_price', 'ASC')->paginate($this->pageSize);
            dd('im low');
        } elseif ($this->orderBy =='Price: High to Low') {
            $houses =House::where('category_id', $category_id)->orderBY('regular_price', 'DESC')->paginate($this->pageSize);
        } elseif ($this->orderBy =='Sort: by Newest') {
            $houses =House::where('category_id', $category_id)->latest('regular_price')->paginate($this->pageSize);
        //which is the same with:
        //$houses =house::orderBY('regular_price', 'DESC')->paginate($this->pageSize);
        } else {
            $houses = House::where('category_id', $category_id)->paginate($this->pageSize);

            // dd($houses);
        }

        // Order by category....
        $categories = Category::orderBy('name', 'ASC')->get();
        // return view('livewire.categ', ['houses'=>$houses, 'categories'=> $categories, 'category_name'=> $category_name, 'pageSize'=> $this->pageSize, 'orderBy'=>$this->orderBy,]);

        return view('livewire.categ', ['houses'=>$houses, 'categories'=> $categories, 'category_name'=> $category_name,'outdoor'=>$outdoor]);
    }

    public function goToCategory($slug)
    {
        $url = route('house.category', ['slug' => $slug]);
        return redirect($url);
        // $this->redirectToCategory($slug);
    }
}
